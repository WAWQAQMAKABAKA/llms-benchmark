[
  {
    "prompt": "Write a Python function to check if a number is prime. (Variation 1)",
    "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "prompt": "Write a function to reverse a string in Python. (Variation 2)",
    "solution": "def reverse_string(s):\n    return s[::-1]"
  },
  {
    "prompt": "Create a function that returns the factorial of a number. (Variation 3)",
    "solution": "def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)"
  },
  {
    "prompt": "Write a function that returns the maximum number in a list. (Variation 4)",
    "solution": "def find_max(lst):\n    return max(lst)"
  },
  {
    "prompt": "Write a function to check if a string is a palindrome. (Variation 5)",
    "solution": "def is_palindrome(s):\n    return s == s[::-1]"
  },
  {
    "prompt": "Write a function that returns the Fibonacci sequence up to n. (Variation 6)",
    "solution": "def fibonacci(n):\n    seq = [0, 1]\n    while seq[-1] + seq[-2] < n:\n        seq.append(seq[-1] + seq[-2])\n    return seq"
  },
  {
    "prompt": "Write a function to count vowels in a string. (Variation 7)",
    "solution": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"
  },
  {
    "prompt": "Write a function that returns the sum of all even numbers in a list. (Variation 8)",
    "solution": "def sum_even(lst):\n    return sum(x for x in lst if x % 2 == 0)"
  },
  {
    "prompt": "Write a function to check if two strings are anagrams. (Variation 9)",
    "solution": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)"
  },
  {
    "prompt": "Write a function that removes duplicates from a list. (Variation 10)",
    "solution": "def remove_duplicates(lst):\n    return list(set(lst))"
  },
  {
    "prompt": "Write a Python function to check if a number is prime. (Variation 11)",
    "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "prompt": "Write a function to reverse a string in Python. (Variation 12)",
    "solution": "def reverse_string(s):\n    return s[::-1]"
  },
  {
    "prompt": "Create a function that returns the factorial of a number. (Variation 13)",
    "solution": "def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)"
  },
  {
    "prompt": "Write a function that returns the maximum number in a list. (Variation 14)",
    "solution": "def find_max(lst):\n    return max(lst)"
  },
  {
    "prompt": "Write a function to check if a string is a palindrome. (Variation 15)",
    "solution": "def is_palindrome(s):\n    return s == s[::-1]"
  },
  {
    "prompt": "Write a function that returns the Fibonacci sequence up to n. (Variation 16)",
    "solution": "def fibonacci(n):\n    seq = [0, 1]\n    while seq[-1] + seq[-2] < n:\n        seq.append(seq[-1] + seq[-2])\n    return seq"
  },
  {
    "prompt": "Write a function to count vowels in a string. (Variation 17)",
    "solution": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"
  },
  {
    "prompt": "Write a function that returns the sum of all even numbers in a list. (Variation 18)",
    "solution": "def sum_even(lst):\n    return sum(x for x in lst if x % 2 == 0)"
  },
  {
    "prompt": "Write a function to check if two strings are anagrams. (Variation 19)",
    "solution": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)"
  },
  {
    "prompt": "Write a function that removes duplicates from a list. (Variation 20)",
    "solution": "def remove_duplicates(lst):\n    return list(set(lst))"
  },
  {
    "prompt": "Write a Python function to check if a number is prime. (Variation 21)",
    "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "prompt": "Write a function to reverse a string in Python. (Variation 22)",
    "solution": "def reverse_string(s):\n    return s[::-1]"
  },
  {
    "prompt": "Create a function that returns the factorial of a number. (Variation 23)",
    "solution": "def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)"
  },
  {
    "prompt": "Write a function that returns the maximum number in a list. (Variation 24)",
    "solution": "def find_max(lst):\n    return max(lst)"
  },
  {
    "prompt": "Write a function to check if a string is a palindrome. (Variation 25)",
    "solution": "def is_palindrome(s):\n    return s == s[::-1]"
  },
  {
    "prompt": "Write a function that returns the Fibonacci sequence up to n. (Variation 26)",
    "solution": "def fibonacci(n):\n    seq = [0, 1]\n    while seq[-1] + seq[-2] < n:\n        seq.append(seq[-1] + seq[-2])\n    return seq"
  },
  {
    "prompt": "Write a function to count vowels in a string. (Variation 27)",
    "solution": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"
  },
  {
    "prompt": "Write a function that returns the sum of all even numbers in a list. (Variation 28)",
    "solution": "def sum_even(lst):\n    return sum(x for x in lst if x % 2 == 0)"
  },
  {
    "prompt": "Write a function to check if two strings are anagrams. (Variation 29)",
    "solution": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)"
  },
  {
    "prompt": "Write a function that removes duplicates from a list. (Variation 30)",
    "solution": "def remove_duplicates(lst):\n    return list(set(lst))"
  },
  {
    "prompt": "Write a Python function to check if a number is prime. (Variation 31)",
    "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "prompt": "Write a function to reverse a string in Python. (Variation 32)",
    "solution": "def reverse_string(s):\n    return s[::-1]"
  },
  {
    "prompt": "Create a function that returns the factorial of a number. (Variation 33)",
    "solution": "def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)"
  },
  {
    "prompt": "Write a function that returns the maximum number in a list. (Variation 34)",
    "solution": "def find_max(lst):\n    return max(lst)"
  },
  {
    "prompt": "Write a function to check if a string is a palindrome. (Variation 35)",
    "solution": "def is_palindrome(s):\n    return s == s[::-1]"
  },
  {
    "prompt": "Write a function that returns the Fibonacci sequence up to n. (Variation 36)",
    "solution": "def fibonacci(n):\n    seq = [0, 1]\n    while seq[-1] + seq[-2] < n:\n        seq.append(seq[-1] + seq[-2])\n    return seq"
  },
  {
    "prompt": "Write a function to count vowels in a string. (Variation 37)",
    "solution": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"
  },
  {
    "prompt": "Write a function that returns the sum of all even numbers in a list. (Variation 38)",
    "solution": "def sum_even(lst):\n    return sum(x for x in lst if x % 2 == 0)"
  },
  {
    "prompt": "Write a function to check if two strings are anagrams. (Variation 39)",
    "solution": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)"
  },
  {
    "prompt": "Write a function that removes duplicates from a list. (Variation 40)",
    "solution": "def remove_duplicates(lst):\n    return list(set(lst))"
  },
  {
    "prompt": "Write a Python function to check if a number is prime. (Variation 41)",
    "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "prompt": "Write a function to reverse a string in Python. (Variation 42)",
    "solution": "def reverse_string(s):\n    return s[::-1]"
  },
  {
    "prompt": "Create a function that returns the factorial of a number. (Variation 43)",
    "solution": "def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)"
  },
  {
    "prompt": "Write a function that returns the maximum number in a list. (Variation 44)",
    "solution": "def find_max(lst):\n    return max(lst)"
  },
  {
    "prompt": "Write a function to check if a string is a palindrome. (Variation 45)",
    "solution": "def is_palindrome(s):\n    return s == s[::-1]"
  },
  {
    "prompt": "Write a function that returns the Fibonacci sequence up to n. (Variation 46)",
    "solution": "def fibonacci(n):\n    seq = [0, 1]\n    while seq[-1] + seq[-2] < n:\n        seq.append(seq[-1] + seq[-2])\n    return seq"
  },
  {
    "prompt": "Write a function to count vowels in a string. (Variation 47)",
    "solution": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"
  },
  {
    "prompt": "Write a function that returns the sum of all even numbers in a list. (Variation 48)",
    "solution": "def sum_even(lst):\n    return sum(x for x in lst if x % 2 == 0)"
  },
  {
    "prompt": "Write a function to check if two strings are anagrams. (Variation 49)",
    "solution": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)"
  },
  {
    "prompt": "Write a function that removes duplicates from a list. (Variation 50)",
    "solution": "def remove_duplicates(lst):\n    return list(set(lst))"
  }
]